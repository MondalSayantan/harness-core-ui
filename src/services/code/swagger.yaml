openapi: 3.0.0
info:
  title: API Specification
  version: 0.0.0
servers:
  - url: /api/v1/
security:
  - bearerAuth: []
paths:
  /admin/users:
    get:
      operationId: adminListUsers
      parameters:
        - in: query
          name: sort
          schema:
            enum:
              - id
              - email
              - created
              - updated
            type: string
        - in: query
          name: order
          schema:
            enum:
              - asc
              - desc
            type: string
        - in: query
          name: page
          schema:
            default: 1
            type: integer
        - in: query
          name: limit
          schema:
            default: 30
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesUser'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    post:
      operationId: adminCreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersCreateRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /admin/users/{user_uid}:
    delete:
      operationId: adminDeleteUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    get:
      operationId: adminGetUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
    patch:
      operationId: adminUpdateUser
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiAdminUsersUpdateRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /admin/users/{user_uid}/admin:
    patch:
      operationId: updateUserAdmin
      parameters:
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateAdminRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - admin
  /login:
    post:
      operationId: onLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiLoginRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /logout:
    post:
      operationId: opLogout
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /principals:
    get:
      operationId: listPrincipals
      parameters:
        - description: The substring by which the principals are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The account ID the principals are retrieved for (Not required
            in standalone).
          in: query
          name: accountIdentifier
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - description: The types of principals to include.
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - service
                - serviceaccount
                - user
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPrincipalInfo'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - principals
  /register:
    post:
      operationId: onRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiRegisterRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - account
  /repos:
    post:
      operationId: createRepository
      parameters:
        - description: path of parent space (Not needed in standalone).
          in: query
          name: space_path
          required: false
          schema:
            default: false
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepositoryRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}:
    delete:
      operationId: deleteRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: findRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    patch:
      operationId: updateRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/blame/{path}:
    get:
      operationId: getBlame
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: Line number from which the file data is considered
          in: query
          name: line_from
          required: false
          schema:
            default: 0
            type: integer
        - description: Line number to which the file data is considered
          in: query
          name: line_to
          required: false
          schema:
            default: 0
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GitrpcBlamePart'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/branches:
    get:
      operationId: listBranches
      parameters:
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring by which the branches are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the branches are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: name
            enum:
              - name
              - date
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoBranch'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: createBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateBranchRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/branches/{branch_name}:
    delete:
      operationId: deleteBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: branch_name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    get:
      operationId: getBranch
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: branch_name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoBranch'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/checks/commits/{commit_sha}:
    get:
      operationId: listStatusCheckResults
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCheck'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
    put:
      operationId: reportStatusCheckResults
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReportStatusCheckResultRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCheck'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - status_checks
  /repos/{repo_ref}/commits:
    get:
      operationId: listCommits
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: The result should only contain commits that occurred after the
            provided reference.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Path for which commit information should be retrieved
          in: query
          name: path
          required: false
          schema:
            default: ''
            type: string
        - description: Epoch since when commit information should be retrieved.
          in: query
          name: since
          required: false
          schema:
            type: integer
        - description: Epoch until when commit information should be retrieved.
          in: query
          name: until
          required: false
          schema:
            type: integer
        - description: Committer pattern for which commit information should be retrieved.
          in: query
          name: committer
          required: false
          schema:
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesListCommitResponse'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: commitFiles
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommitFilesRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCommitFilesResponse'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits/{commit_sha}:
    get:
      operationId: getCommit
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: commit_sha
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesCommit'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/commits/calculate-divergence:
    post:
      operationId: calculateCommitDivergence
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCalculateCommitDivergenceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommitDivergence'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/compare/{range}:
    get:
      operationId: rawDiff
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/content/{path}:
    get:
      operationId: getContent
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiGetContentOutput'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/diff-stats/{range}:
    get:
      operationId: diffStats
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesDiffStats'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/merge-check/{range}:
    post:
      operationId: mergeCheck
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: range
          required: true
          schema:
            example: main..dev
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoMergeCheck'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/move:
    post:
      operationId: moveRepository
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveRepoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesRepository'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/paths:
    get:
      operationId: listRepositoryPaths
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: createRepositoryPath
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateRepoPathRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/paths/{path_id}:
    delete:
      operationId: deleteRepositoryPath
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/pullreq:
    get:
      operationId: listPullReq
      parameters:
        - description: The state of the pull requests to include in the result.
          in: query
          name: state
          required: false
          schema:
            items:
              default: open
              enum:
                - closed
                - merged
                - open
              type: string
            type: array
        - description: Source repository ref of the pull requests.
          in: query
          name: source_repo_ref
          required: false
          schema:
            type: string
        - description: Source branch of the pull requests.
          in: query
          name: source_branch
          required: false
          schema:
            type: string
        - description: Target branch of the pull requests.
          in: query
          name: target_branch
          required: false
          schema:
            type: string
        - description: The substring by which the pull requests are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The principal ID who created pull requests.
          in: query
          name: created_by
          required: false
          schema:
            type: integer
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the pull requests are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: number
            enum:
              - created
              - edited
              - merged
              - number
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReq'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    post:
      operationId: createPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePullReqRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}:
    get:
      operationId: getPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    patch:
      operationId: updatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/activities:
    get:
      operationId: listPullReqActivities
      parameters:
        - description: The kind of the pull request activity to include in the result.
          in: query
          name: kind
          required: false
          schema:
            items:
              enum:
                - change-comment
                - comment
                - system
              type: string
            type: array
        - description: The type of the pull request activity to include in the result.
          in: query
          name: type
          required: false
          schema:
            items:
              enum:
                - branch-delete
                - branch-update
                - code-comment
                - comment
                - merge
                - review-submit
                - state-change
                - title-change
              type: string
            type: array
        - description: The result should contain only entries created at and after this
            timestamp (unix millis).
          in: query
          name: after
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The result should contain only entries created before this timestamp
            (unix millis).
          in: query
          name: before
          required: false
          schema:
            minimum: 0
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqActivity'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments:
    post:
      operationId: commentCreatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentCreatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}:
    delete:
      operationId: commentDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    patch:
      operationId: commentUpdatePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentUpdatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/comments/{pullreq_comment_id}/status:
    put:
      operationId: commentStatusPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_comment_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCommentStatusPullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqActivity'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/commits:
    get:
      operationId: listPullReqCommits
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesCommit'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/diff:
    get:
      operationId: rawPullReqDiff
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/merge:
    post:
      operationId: mergePullReqOp
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMergePullReq'
      responses:
        '200':
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '405':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Method Not Allowed
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unprocessable Entity
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/metadata:
    get:
      operationId: pullReqMetaData
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqStats'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers:
    get:
      operationId: reviewerListPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPullReqReviewer'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
    put:
      operationId: reviewerAddPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewerAddPullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReqReviewer'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviewers/{pullreq_reviewer_id}:
    delete:
      operationId: reviewerDeletePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
        - in: path
          name: pullreq_reviewer_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/reviews:
    post:
      operationId: reviewSubmitPullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiReviewSubmitPullReqRequest'
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/pullreq/{pullreq_number}/state:
    post:
      operationId: statePullReq
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: pullreq_number
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiStatePullReqRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPullReq'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - pullreq
  /repos/{repo_ref}/raw/{path}:
    get:
      operationId: getRaw
      parameters:
        - description: The git reference (branch / tag / commitID) that will be used
            to retrieve the data. If no value is provided the default branch of the
            repository is used.
          in: query
          name: git_ref
          required: false
          schema:
            default: '{Repository Default Branch}'
            type: string
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/service-accounts:
    get:
      operationId: listRepositoryServiceAccounts
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/tags:
    get:
      operationId: listTags
      parameters:
        - description: Indicates whether optional commit information should be included
            in the response.
          in: query
          name: include_commit
          required: false
          schema:
            default: false
            type: boolean
        - description: The substring by which the tags are filtered.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The data by which the tags are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: name
            enum:
              - name
              - date
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RepoCommitTag'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
    post:
      operationId: createTag
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTagRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepoCommitTag'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/tags/{tag_name}:
    delete:
      operationId: deleteTag
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: tag_name
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Conflict
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - repository
  /repos/{repo_ref}/webhooks:
    get:
      operationId: listWebhooks
      parameters:
        - description: The substring which is used to filter the spaces by their path
            name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the webhooks are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: id
            enum:
              - id
              - display_name
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OpenapiWebhookType'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    post:
      operationId: createWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateWebhookRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}:
    delete:
      operationId: deleteWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    get:
      operationId: getWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
    patch:
      operationId: updateWebhook
      parameters:
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateWebhookRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenapiWebhookType'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}/executions:
    get:
      operationId: listWebhookExecutions
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesWebhookExecution'
                type: array
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /repos/{repo_ref}/webhooks/{webhook_id}/executions/{webhook_execution_id}:
    get:
      operationId: getWebhookExecution
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: repo_ref
          required: true
          schema:
            type: string
        - in: path
          name: webhook_id
          required: true
          schema:
            type: integer
        - in: path
          name: webhook_execution_id
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesWebhookExecution'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - webhook
  /resources/gitignore:
    get:
      operationId: listGitignore
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - resource
  /resources/license:
    get:
      operationId: listLicenses
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  properties:
                    label:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - resource
  /spaces:
    post:
      operationId: createSpace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateSpaceRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}:
    delete:
      operationId: deleteSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    get:
      operationId: getSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: updateSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiUpdateSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/members:
    get:
      operationId: membershipList
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesMembership'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: membershipAdd
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/EnumMembershipRole'
                user_uid:
                  type: string
              type: object
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembership'
          description: Created
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/members/{user_uid}:
    delete:
      operationId: membershipDelete
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    patch:
      operationId: membershipUpdate
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: user_uid
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                role:
                  $ref: '#/components/schemas/EnumMembershipRole'
              type: object
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesMembership'
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/move:
    post:
      operationId: moveSpace
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiMoveSpaceRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesSpace'
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/paths:
    get:
      operationId: listPaths
      parameters:
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesPath'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
    post:
      operationId: createPath
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreatePathRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesPath'
          description: Created
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Bad Request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/paths/{path_id}:
    delete:
      operationId: deletePath
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
        - in: path
          name: path_id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/repos:
    get:
      operationId: listRepos
      parameters:
        - description: The substring which is used to filter the repositories by their
            path name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the repositories are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: uid
            enum:
              - uid
              - path
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesRepository'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/service-accounts:
    get:
      operationId: listServiceAccounts
      parameters:
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesServiceAccount'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /spaces/{space_ref}/spaces:
    get:
      operationId: listSpaces
      parameters:
        - description: The substring which is used to filter the spaces by their path
            name.
          in: query
          name: query
          required: false
          schema:
            type: string
        - description: The data by which the spaces are sorted.
          in: query
          name: sort
          required: false
          schema:
            default: uid
            enum:
              - uid
              - path
              - created
              - updated
            type: string
        - description: The order of the output.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
        - description: The page to return.
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The maximum number of results to return.
          in: query
          name: limit
          required: false
          schema:
            default: 30
            maximum: 100
            minimum: 1
            type: integer
        - in: path
          name: space_ref
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TypesSpace'
                type: array
          description: OK
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Unauthorized
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Forbidden
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Not Found
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - space
  /user:
    get:
      operationId: getUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
    patch:
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesUser'
          description: OK
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
  /user/token:
    post:
      operationId: createToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OpenapiCreateTokenRequest'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TypesTokenResponse'
          description: Created
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsererrorError'
          description: Internal Server Error
      tags:
        - user
components:
  schemas:
    EnumAccessGrant:
      type: integer
    EnumCheckPayloadKind:
      enum:
        - external
      type: string
    EnumCheckStatus:
      enum:
        - error
        - failure
        - pending
        - running
        - success
      type: string
    EnumContentEncodingType:
      enum:
        - base64
        - utf8
      type: string
    EnumMembershipRole:
      enum:
        - contributor
        - executor
        - reader
        - space_owner
      type: string
    EnumMergeCheckStatus:
      type: string
    EnumMergeMethod:
      enum:
        - merge
        - squash
        - rebase
      type: string
    EnumParentResourceType:
      enum:
        - space
        - repo
      type: string
    EnumPathTargetType:
      type: string
    EnumPrincipalType:
      enum:
        - service
        - serviceaccount
        - user
      type: string
    EnumPullReqActivityKind:
      enum:
        - change-comment
        - comment
        - system
      type: string
    EnumPullReqActivityType:
      enum:
        - branch-delete
        - branch-update
        - code-comment
        - comment
        - merge
        - review-submit
        - state-change
        - title-change
      type: string
    EnumPullReqCommentStatus:
      enum:
        - active
        - resolved
      type: string
    EnumPullReqReviewDecision:
      enum:
        - approved
        - changereq
        - pending
        - reviewed
      type: string
    EnumPullReqReviewerType:
      enum:
        - assigned
        - requested
        - self_assigned
      type: string
    EnumPullReqState:
      enum:
        - closed
        - merged
        - open
      type: string
    EnumTokenType:
      type: string
    EnumWebhookExecutionResult:
      enum:
        - fatal_error
        - retriable_error
        - success
      nullable: true
      type: string
    EnumWebhookParent:
      enum:
        - repo
        - space
      type: string
    EnumWebhookTrigger:
      enum:
        - branch_created
        - branch_deleted
        - branch_updated
        - pullreq_branch_updated
        - pullreq_created
        - pullreq_reopened
        - tag_created
        - tag_deleted
        - tag_updated
      type: string
    GitrpcBlamePart:
      properties:
        commit:
          $ref: '#/components/schemas/GitrpcCommit'
        lines:
          items:
            type: string
          nullable: true
          type: array
      type: object
    GitrpcCommit:
      nullable: true
      properties:
        author:
          $ref: '#/components/schemas/GitrpcSignature'
        committer:
          $ref: '#/components/schemas/GitrpcSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      type: object
    GitrpcFileAction:
      enum:
        - CREATE
        - UPDATE
        - DELETE
        - MOVE
      type: string
    GitrpcIdentity:
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    GitrpcSignature:
      properties:
        identity:
          $ref: '#/components/schemas/GitrpcIdentity'
        when:
          format: date-time
          type: string
      type: object
    OpenapiAdminUsersCreateRequest:
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
      type: object
    OpenapiAdminUsersUpdateRequest:
      properties:
        display_name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    OpenapiCalculateCommitDivergenceRequest:
      properties:
        max_count:
          type: integer
        requests:
          items:
            $ref: '#/components/schemas/RepoCommitDivergenceRequest'
          nullable: true
          type: array
      type: object
    OpenapiCommentCreatePullReqRequest:
      properties:
        line_end:
          type: integer
        line_end_new:
          type: boolean
        line_start:
          type: integer
        line_start_new:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        source_commit_sha:
          type: string
        target_commit_sha:
          type: string
        text:
          type: string
      type: object
    OpenapiCommentStatusPullReqRequest:
      properties:
        status:
          $ref: '#/components/schemas/EnumPullReqCommentStatus'
      type: object
    OpenapiCommentUpdatePullReqRequest:
      properties:
        text:
          type: string
      type: object
    OpenapiCommitFilesRequest:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/RepoCommitFileAction'
          nullable: true
          type: array
        branch:
          type: string
        message:
          type: string
        new_branch:
          type: string
        title:
          type: string
      type: object
    OpenapiContent:
      oneOf:
        - $ref: '#/components/schemas/RepoFileContent'
        - $ref: '#/components/schemas/OpenapiDirContent'
        - $ref: '#/components/schemas/RepoSymlinkContent'
        - $ref: '#/components/schemas/RepoSubmoduleContent'
      type: object
    OpenapiContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiContentType:
      enum:
        - file
        - dir
        - symlink
        - submodule
      type: string
    OpenapiCreateBranchRequest:
      properties:
        name:
          type: string
        target:
          nullable: true
          type: string
      type: object
    OpenapiCreatePathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreatePullReqRequest:
      properties:
        description:
          type: string
        is_draft:
          type: boolean
        source_branch:
          type: string
        source_repo_ref:
          type: string
        target_branch:
          type: string
        title:
          type: string
      type: object
    OpenapiCreateRepoPathRequest:
      properties:
        path:
          type: string
      type: object
    OpenapiCreateRepositoryRequest:
      properties:
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_ignore:
          type: string
        is_public:
          type: boolean
        license:
          type: string
        parent_ref:
          type: string
        readme:
          type: boolean
        uid:
          type: string
      type: object
    OpenapiCreateSpaceRequest:
      properties:
        description:
          type: string
        is_public:
          type: boolean
        parent_ref:
          type: string
        uid:
          type: string
      type: object
    OpenapiCreateTagRequest:
      properties:
        message:
          nullable: true
          type: string
        name:
          type: string
        target:
          nullable: true
          type: string
      type: object
    OpenapiCreateTokenRequest:
      properties:
        grants:
          $ref: '#/components/schemas/EnumAccessGrant'
        lifetime:
          $ref: '#/components/schemas/TimeDuration'
        uid:
          type: string
      type: object
    OpenapiCreateWebhookRequest:
      properties:
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        insecure:
          type: boolean
        secret:
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        url:
          type: string
      type: object
    OpenapiDirContent:
      properties:
        entries:
          items:
            $ref: '#/components/schemas/OpenapiContentInfo'
          nullable: true
          type: array
      type: object
    OpenapiGetContentOutput:
      properties:
        content:
          $ref: '#/components/schemas/OpenapiContent'
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/OpenapiContentType'
      type: object
    OpenapiLoginRequest:
      properties:
        login_identifier:
          type: string
        password:
          type: string
      type: object
    OpenapiMergePullReq:
      properties:
        method:
          $ref: '#/components/schemas/EnumMergeMethod'
        source_sha:
          type: string
      type: object
    OpenapiMoveRepoRequest:
      properties:
        keep_as_alias:
          type: boolean
        parent_ref:
          nullable: true
          type: string
        uid:
          nullable: true
          type: string
      type: object
    OpenapiMoveSpaceRequest:
      properties:
        keep_as_alias:
          type: boolean
        parent_ref:
          nullable: true
          type: string
        uid:
          nullable: true
          type: string
      type: object
    OpenapiRegisterRequest:
      properties:
        display_name:
          type: string
        email:
          type: string
        password:
          type: string
        uid:
          type: string
      type: object
    OpenapiReportStatusCheckResultRequest:
      properties:
        check_uid:
          type: string
        link:
          type: string
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
      type: object
    OpenapiReviewSubmitPullReqRequest:
      properties:
        commit_sha:
          type: string
        decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        message:
          type: string
      type: object
    OpenapiReviewerAddPullReqRequest:
      properties:
        reviewer_id:
          type: integer
      type: object
    OpenapiStatePullReqRequest:
      properties:
        is_draft:
          type: boolean
        message:
          type: string
        state:
          $ref: '#/components/schemas/EnumPullReqState'
      type: object
    OpenapiUpdateAdminRequest:
      properties:
        admin:
          type: boolean
      type: object
    OpenapiUpdatePullReqRequest:
      properties:
        description:
          type: string
        title:
          type: string
      type: object
    OpenapiUpdateRepoRequest:
      properties:
        description:
          nullable: true
          type: string
        is_public:
          nullable: true
          type: boolean
      type: object
    OpenapiUpdateSpaceRequest:
      properties:
        description:
          nullable: true
          type: string
        is_public:
          nullable: true
          type: boolean
      type: object
    OpenapiUpdateWebhookRequest:
      properties:
        description:
          nullable: true
          type: string
        display_name:
          nullable: true
          type: string
        enabled:
          nullable: true
          type: boolean
        insecure:
          nullable: true
          type: boolean
        secret:
          nullable: true
          type: string
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        url:
          nullable: true
          type: string
      type: object
    OpenapiWebhookType:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        display_name:
          type: string
        enabled:
          type: boolean
        has_secret:
          type: boolean
        id:
          type: integer
        insecure:
          type: boolean
        latest_execution_result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumWebhookParent'
        triggers:
          items:
            $ref: '#/components/schemas/EnumWebhookTrigger'
          nullable: true
          type: array
        updated:
          type: integer
        url:
          type: string
        version:
          type: integer
      type: object
    RepoBranch:
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        sha:
          type: string
      type: object
    RepoCommitDivergence:
      properties:
        ahead:
          type: integer
        behind:
          type: integer
      type: object
    RepoCommitDivergenceRequest:
      properties:
        from:
          type: string
        to:
          type: string
      type: object
    RepoCommitFileAction:
      properties:
        action:
          $ref: '#/components/schemas/GitrpcFileAction'
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        path:
          type: string
        payload:
          type: string
        sha:
          type: string
      type: object
    RepoCommitFilesResponse:
      properties:
        commit_id:
          type: string
      type: object
    RepoCommitTag:
      properties:
        commit:
          $ref: '#/components/schemas/TypesCommit'
        is_annotated:
          type: boolean
        message:
          type: string
        name:
          type: string
        sha:
          type: string
        tagger:
          $ref: '#/components/schemas/TypesSignature'
        title:
          type: string
      type: object
    RepoContent: {}
    RepoContentInfo:
      properties:
        latest_commit:
          $ref: '#/components/schemas/TypesCommit'
        name:
          type: string
        path:
          type: string
        sha:
          type: string
        type:
          $ref: '#/components/schemas/RepoContentType'
      type: object
    RepoContentType:
      type: string
    RepoFileContent:
      properties:
        data:
          type: string
        data_size:
          type: integer
        encoding:
          $ref: '#/components/schemas/EnumContentEncodingType'
        size:
          type: integer
      type: object
    RepoMergeCheck:
      properties:
        conflict_files:
          items:
            type: string
          type: array
        mergeable:
          type: boolean
      type: object
    RepoSubmoduleContent:
      properties:
        commit_sha:
          type: string
        url:
          type: string
      type: object
    RepoSymlinkContent:
      properties:
        size:
          type: integer
        target:
          type: string
      type: object
    TimeDuration:
      type: integer
    TypesCheck:
      properties:
        created:
          type: integer
        id:
          type: integer
        link:
          type: string
        metadata: {}
        payload:
          $ref: '#/components/schemas/TypesCheckPayload'
        reported_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        status:
          $ref: '#/components/schemas/EnumCheckStatus'
        summary:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesCheckPayload:
      properties:
        data: {}
        kind:
          $ref: '#/components/schemas/EnumCheckPayloadKind'
        version:
          type: string
      type: object
    TypesCodeCommentFields:
      properties:
        line_new:
          type: integer
        line_old:
          type: integer
        merge_base_sha:
          type: string
        outdated:
          type: boolean
        path:
          type: string
        source_sha:
          type: string
        span_new:
          type: integer
        span_old:
          type: integer
      type: object
    TypesCommit:
      properties:
        author:
          $ref: '#/components/schemas/TypesSignature'
        committer:
          $ref: '#/components/schemas/TypesSignature'
        message:
          type: string
        sha:
          type: string
        title:
          type: string
      type: object
    TypesDiffStats:
      properties:
        commits:
          type: integer
        files_changed:
          type: integer
      type: object
    TypesIdentity:
      properties:
        email:
          type: string
        name:
          type: string
      type: object
    TypesListCommitResponse:
      properties:
        commits:
          items:
            $ref: '#/components/schemas/TypesCommit'
          nullable: true
          type: array
        rename_details:
          items:
            $ref: '#/components/schemas/TypesRenameDetails'
          nullable: true
          type: array
      type: object
    TypesMembership:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        principal:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        role:
          $ref: '#/components/schemas/EnumMembershipRole'
        updated:
          type: integer
      type: object
    TypesPath:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        id:
          type: integer
        is_primary:
          type: boolean
        target_id:
          type: integer
        target_type:
          $ref: '#/components/schemas/EnumPathTargetType'
        updated:
          type: integer
        value:
          type: string
      type: object
    TypesPrincipalInfo:
      properties:
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumPrincipalType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesPullReq:
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        description:
          type: string
        edited:
          type: integer
        is_draft:
          type: boolean
        merge_base_sha:
          type: string
        merge_check_status:
          $ref: '#/components/schemas/EnumMergeCheckStatus'
        merge_conflicts:
          nullable: true
          type: string
        merge_method:
          $ref: '#/components/schemas/EnumMergeMethod'
        merge_sha:
          nullable: true
          type: string
        merge_target_sha:
          nullable: true
          type: string
        merged:
          nullable: true
          type: integer
        merger:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        number:
          type: integer
        source_branch:
          type: string
        source_repo_id:
          type: integer
        source_sha:
          type: string
        state:
          $ref: '#/components/schemas/EnumPullReqState'
        stats:
          $ref: '#/components/schemas/TypesPullReqStats'
        target_branch:
          type: string
        target_repo_id:
          type: integer
        title:
          type: string
      type: object
    TypesPullReqActivity:
      properties:
        author:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        code_comment:
          $ref: '#/components/schemas/TypesCodeCommentFields'
        created:
          type: integer
        deleted:
          nullable: true
          type: integer
        edited:
          type: integer
        id:
          type: integer
        kind:
          $ref: '#/components/schemas/EnumPullReqActivityKind'
        metadata:
          additionalProperties: {}
          nullable: true
          type: object
        order:
          type: integer
        parent_id:
          nullable: true
          type: integer
        payload: {}
        pullreq_id:
          type: integer
        repo_id:
          type: integer
        resolved:
          nullable: true
          type: integer
        resolver:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sub_order:
          type: integer
        text:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqActivityType'
      type: object
    TypesPullReqReviewer:
      properties:
        added_by:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        created:
          type: integer
        latest_review_id:
          nullable: true
          type: integer
        review_decision:
          $ref: '#/components/schemas/EnumPullReqReviewDecision'
        reviewer:
          $ref: '#/components/schemas/TypesPrincipalInfo'
        sha:
          type: string
        type:
          $ref: '#/components/schemas/EnumPullReqReviewerType'
        updated:
          type: integer
      type: object
    TypesPullReqStats:
      properties:
        commits:
          type: integer
        conversations:
          type: integer
        files_changed:
          type: integer
        unresolved_count:
          type: integer
      type: object
    TypesRenameDetails:
      properties:
        commit_sha_after:
          type: string
        commit_sha_before:
          type: string
        new_path:
          type: string
        old_path:
          type: string
      type: object
    TypesRepository:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        default_branch:
          type: string
        description:
          type: string
        fork_id:
          type: integer
        git_url:
          type: string
        id:
          type: integer
        is_public:
          type: boolean
        num_closed_pulls:
          type: integer
        num_forks:
          type: integer
        num_merged_pulls:
          type: integer
        num_open_pulls:
          type: integer
        num_pulls:
          type: integer
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesServiceAccount:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        parent_id:
          type: integer
        parent_type:
          $ref: '#/components/schemas/EnumParentResourceType'
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesSignature:
      properties:
        identity:
          $ref: '#/components/schemas/TypesIdentity'
        when:
          format: date-time
          type: string
      type: object
    TypesSpace:
      properties:
        created:
          type: integer
        created_by:
          type: integer
        description:
          type: string
        id:
          type: integer
        is_public:
          type: boolean
        parent_id:
          type: integer
        path:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesToken:
      properties:
        created_by:
          type: integer
        expires_at:
          type: integer
        grants:
          $ref: '#/components/schemas/EnumAccessGrant'
        issued_at:
          type: integer
        principal_id:
          type: integer
        type:
          $ref: '#/components/schemas/EnumTokenType'
        uid:
          type: string
      type: object
    TypesTokenResponse:
      properties:
        access_token:
          type: string
        token:
          $ref: '#/components/schemas/TypesToken'
      type: object
    TypesUser:
      properties:
        admin:
          type: boolean
        blocked:
          type: boolean
        created:
          type: integer
        display_name:
          type: string
        email:
          type: string
        uid:
          type: string
        updated:
          type: integer
      type: object
    TypesWebhookExecution:
      properties:
        created:
          type: integer
        duration:
          type: integer
        error:
          type: string
        id:
          type: integer
        request:
          $ref: '#/components/schemas/TypesWebhookExecutionRequest'
        response:
          $ref: '#/components/schemas/TypesWebhookExecutionResponse'
        result:
          $ref: '#/components/schemas/EnumWebhookExecutionResult'
        retrigger_of:
          nullable: true
          type: integer
        retriggerable:
          type: boolean
        trigger_type:
          $ref: '#/components/schemas/EnumWebhookTrigger'
        webhook_id:
          type: integer
      type: object
    TypesWebhookExecutionRequest:
      properties:
        body:
          type: string
        headers:
          type: string
        url:
          type: string
      type: object
    TypesWebhookExecutionResponse:
      properties:
        body:
          type: string
        headers:
          type: string
        status:
          type: string
        status_code:
          type: integer
      type: object
    UserUpdateInput:
      properties:
        display_name:
          nullable: true
          type: string
        email:
          nullable: true
          type: string
        password:
          nullable: true
          type: string
      type: object
    UsererrorError:
      properties:
        message:
          type: string
        values:
          additionalProperties: {}
          type: object
      type: object
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
